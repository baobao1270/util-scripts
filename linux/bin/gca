#!/bin/bash
# gca.sh - v1.0.0
# Copyight (c) 2024 Joseph Chris <joseph@josephcz.xyz> under MIT License
#
# A utility to use Google Trust Service Public CA with ACME clients
#

NAME=gca
VERSION=1.0.0
LICENSE=MIT
AUTHORS="Joseph Chris <joseph@josephcz.xyz>"
DESCRIPTION="A utility to use Google Trust Service Public CA with ACME clients"

CONF_SA_FILE="$HOME/.gca.json"
CONF_SA_KEYCHAIN="gca"
CONF_OAUTH_URL="https://oauth2.googleapis.com/token"

command="$1"
shift
if [ "$command" == "push" ] || [ "$command" == "rreg" ]; then
    remote_server="$1"
    shift
fi
options="$1"

function show_version {
    echo "$NAME $VERSION"
}

function show_help {
    echo "Copyright (c) $(date +%Y) $AUTHORS $LICENSE License"
    echo
    show_version
    echo "$DESCRIPTION"
    echo
    echo "Usage: $NAME [command] [options]"
    echo
    echo "Commands:"
    echo "  check         Check if all required dependencies are installed (if success, no output is shown)"
    echo "  key           Get the service account key JSON"
    echo "  skey          Save the service account key JSON to the keychain (macOS only)"
    echo "  jwt           Generate a JWT token"
    echo "  ak            Obtain a temporary access token of the service account"
    echo "  eab           Get ACME EAB credentials"
    echo "  push          Push ACME EAB credentials to a remote server with SSH"
    echo "  reg           Register ACME EAB credentials with local acme.sh"
    echo "  rreg          Register ACME EAB credentials with a remote acme.sh server"
    echo "  version       Show version information"
    echo "  help          Show this help message"
    echo
    echo "Options:"
    echo "  --keychain    Use macOS keychain to store service account key"
    echo
    echo "Note:"
    echo "  Type '$NAME gcloud-help' to get instructions on how to create a service account key in Google Cloud Console"
}

function command_exists {
    command -v "$1" >/dev/null 2>&1
}

function check_commands {
    if ! command_exists tr; then
        >&2 echo "tr is required but not installed"
        exit 1
    fi
    if ! command_exists base64; then
        >&2 echo "base64 is required but not installed"
        exit 1
    fi
    if ! command_exists jq; then
        >&2 echo "jq is required but not installed"
        exit 1
    fi
    if ! command_exists openssl; then
        >&2 echo "openssl is required but not installed"
        exit 1
    fi
    if ! command_exists curl; then
        >&2 echo "curl is required but not installed"
        exit 1
    fi
}

function obtain_service_account {
    check_commands
    if [ "$options" == "--keychain" ] && [ "$(uname)" == "Darwin" ]; then
        security find-generic-password -s "$CONF_SA_KEYCHAIN" -w | base64 -d
        if [ $? -ne 0 ]; then
            >&2 echo "Service account key not found in keychain"
            exit 1
        fi
    else
        if [ ! -f "$CONF_SA_FILE" ]; then
            >&2 echo "Service account key not found in $CONF_SA_FILE"
            exit 1
        fi
        cat "$CONF_SA_FILE"
    fi
}

function jwt_base64 {
    base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'
}

function create_jwt() {
    SA=$(obtain_service_account)
    PRIVATE_KEY_FILE=$(mktemp)
    SA_EMAIL=$(echo "$SA" | jq -r '.client_email')
    SA_PRIVATE_KEY=$(echo "$SA" | jq -r '.private_key')
    echo "$SA_PRIVATE_KEY" > $PRIVATE_KEY_FILE

    JWT_SCOPE="https://www.googleapis.com/auth/cloud-platform"
    JWT_AUD=$CONF_OAUTH_URL
    JWT_ISS=$SA_EMAIL
    JWT_IAT=$(date +%s)
    JWT_EXP=$(($JWT_IAT + 3600))
    JWT_HEADER='{"alg":"RS256","typ":"JWT"}'
    JWT_PAYLOAD='{
        "iss": "'$JWT_ISS'",
        "scope": "'$JWT_SCOPE'",
        "aud": "'$JWT_AUD'",
        "exp": '$JWT_EXP',
        "iat": '$JWT_IAT'
    }'
    BASE64_JWT_HEADER=$(echo -n "$JWT_HEADER" | jwt_base64)
    BASE64_JWT_PAYLOAD=$(echo -n "$JWT_PAYLOAD" | jwt_base64)
    BASE64_JWT_SIGNATURE=$(echo -n "$BASE64_JWT_HEADER.$BASE64_JWT_PAYLOAD" | openssl dgst -sha256 -sign "$PRIVATE_KEY_FILE" | jwt_base64)
    printf "%s.%s.%s" "$BASE64_JWT_HEADER" "$BASE64_JWT_PAYLOAD" "$BASE64_JWT_SIGNATURE"
}

function auth_ak {
    JWT=$(create_jwt)
    printf "%s" $(curl -sL -X POST -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=$JWT" "$CONF_OAUTH_URL" | jq -r '.access_token')
}

function create_eab {
    AK=$(auth_ak)
    EAB=$(curl -sL -X POST -H "Authorization: Bearer $AK" https://publicca.googleapis.com/v1/projects/acme-default/locations/global/externalAccountKeys)
    EAB_NAME=$(echo "$EAB" | jq -r '.name')
    EAB_KEY_ID=$(echo "$EAB" | jq -r '.keyId')
    EAB_HMAC_KEY=$(echo "$EAB" | jq -r '.b64MacKey' | base64 -d)
    echo "EAB_NAME=$EAB_NAME"
    echo "EAB_KEY_ID=$EAB_KEY_ID"
    echo "EAB_HMAC_KEY=$EAB_HMAC_KEY"
}

function create_eab_file {
    EAB_ENV=$(mktemp)
    create_eab > $EAB_ENV
    printf "%s" $EAB_ENV
}

function push_eab_to_server {
    if [ ! command -v scp &> /dev/null ]; then
        >&2 echo "scp is required but not installed"
        exit 1
    fi
    if [ -z "$remote_server" ]; then
        >&2 echo "Remote server not specified"
        >&2 echo "Usage: $NAME push <ssh-host>:<remote-path>"
        exit 1
    fi
    EAB_ENV_FILE=$(create_eab_file)
    scp $EAB_ENV_FILE $remote_server
    echo "EAB environment variables pushed to ssh://$remote_server"
    rm -fv $EAB_ENV_FILE
}

function get_register_eab_command {
    EAB_ENV_FILE=$(create_eab_file)
    EMAIL=$(obtain_service_account | jq -r '.client_email')
    source $EAB_ENV_FILE
    echo "acme.sh --register-account --server google --eab-kid $EAB_KEY_ID --eab-hmac-key $EAB_HMAC_KEY --email $EMAIL"
    rm -f $EAB_ENV_FILE
}

function register_eab {
    if ! command_exists acme.sh; then
        >&2 echo "acme.sh is required but not installed"
        exit 1
    fi
    $(get_register_eab_command)
}

function register_eab_remote {
    if ! command_exists ssh; then
        >&2 echo "ssh is required but not installed"
        exit 1
    fi
    if [ -z "$remote_server" ]; then
        >&2 echo "Remote server not specified"
        >&2 echo "Usage: $NAME rreg <ssh-host>"
        exit 1
    fi
    ssh $remote_server $(get_register_eab_command)
}

function save_service_account {
    echo "Please save the service account key JSON to $CONF_SA_FILE"
    if [ ! -f "$CONF_SA_FILE" ]; then
        echo "Service key file not ready"
        exit 1
    fi
    if [ "$(uname)" == "Darwin" ]; then
        SECRET=$(cat "$CONF_SA_FILE" | base64 | tr -d '\n')
        security add-generic-password -a '' -l 'Google CA ACME Service Account Key (gca.sh)' -s "$CONF_SA_KEYCHAIN" -w "$SECRET" -T ''
        if [ $? -ne 0 ]; then
            >&2 echo "Failed to save service account key to keychain"
            exit 1
        fi
        echo "Service account key saved to keychain"
    else
        >&2 echo "Saving service account key to keychain is only supported on macOS"
    fi
}

if [ -z "$command"           ]; then show_help;              exit 0; fi
if [ "$command" == "check"   ]; then check_commands;         exit 0; fi
if [ "$command" == "help"    ]; then show_help;              exit 0; fi
if [ "$command" == "version" ]; then show_version;           exit 0; fi
if [ "$command" == "key"     ]; then obtain_service_account; exit 0; fi
if [ "$command" == "jwt"     ]; then create_jwt;             exit 0; fi
if [ "$command" == "ak"      ]; then auth_ak;                exit 0; fi
if [ "$command" == "eab"     ]; then create_eab;             exit 0; fi
if [ "$command" == "push"    ]; then push_eab_to_server;     exit 0; fi
if [ "$command" == "reg"     ]; then register_eab;           exit 0; fi
if [ "$command" == "rreg"    ]; then register_eab_remote;    exit 0; fi
if [ "$command" == "skey"    ]; then save_service_account;   exit 0; fi
if [ "$command" == "gcloud-help" ]; then
    echo -e "To create a service account key in Google Cloud Console:"
    echo -e "1. Go to \033[4mhttps://console.cloud.google.com/iam-admin/serviceaccounts\033[0m"
    echo -e "2. Create a new service account"
    echo -e "3. Grant the service account the role '\033[4mExternal Account Key Creator\033[0m'"
    echo -e "4. Under 'Keys', create a new key and download the JSON file"
    echo -e "5. Move the JSON file to \033[4m$CONF_SA_FILE\033[0m"
    echo -e "6. Run \033[4m$NAME eab\033[0m to generate ACME EAB credentials. You may wait 5 minutes for the service account to be effective."
    echo -e "7. Run \033[4m$NAME skey\033[0m to save the service account key to macOS keychain (optional)"
    exit 0
fi
